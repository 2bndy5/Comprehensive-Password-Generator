

def --wrapped run-cmd [...cmd: string] {
    let app = if (
        ($cmd | first) == 'cargo'
        or ($cmd | first) == 'yarn'
    ) {
        ($cmd | first 2) | str join ' '
    } else if ($cmd | first) == 'uv' {
        mut sub_cmd = $cmd.1
        if ($sub_cmd == 'run') {
            # filter out options to `uv run`
            mut is_opt = false
            for arg in ($cmd | skip 2) {
                if ($arg | str starts-with '--') {
                    $is_opt = true
                } else if $is_opt {
                    # does not begin with '--' but the previous arg did.
                    # toggle flag off and skip this arg
                    $is_opt = false
                } else {
                    # found the `uv run <command>`
                    $sub_cmd = $arg
                    break
                }
            }
            $sub_cmd
        } else {
            ($cmd | first 2) | str join ' '
        }
    } else {
        ($cmd | first)
    }
    print $"(ansi blue)\nRunning(ansi reset) ($cmd | str join ' ')"
    let elapsed = timeit {|| ^($cmd | first) ...($cmd | skip 1)}
    print $"(ansi magenta)($app) took ($elapsed)(ansi reset)"
}


# Run the test suite
#
# Requires the following installed:
# - cargo-llvm-cov
# - cargo-nextest
#
# This also tests the FFI bindings, so
# it invokes `uv` and `yarn` to ensure
# the bindings (and their dependencies) are installed .
#
def "nur test" [
    --clean (-c) # Purge previous test artifacts. Use to refresh coverage data.
    --profile (-p): string = 'default' # The profile defined in .config/nextest.toml
] {
    # ensure bindings are installed
    if ($clean) {
        nur install
    } else {
        nur install --dirty
    }

    # Now test the bindings
    run-cmd uv run --directory bindings/python pytest -v
    run-cmd yarn test

    if $clean {
        run-cmd cargo llvm-cov clean
    }
    let cmd = (
        [cargo llvm-cov --no-report nextest --features bin]
        | append [--color always --profile $profile]
    )
    run-cmd ...$cmd
}


# Generate detailed coverage report
#
# Pass "--open" to load the built report in your browser
# Requires cargo-llvm-cov installed.
def --wrapped "nur test llvm-cov" [
    ...args: string # Additional arguments for `llvm-cov report --html`.
] {
    run-cmd cargo llvm-cov report --html ...$args
}


# Install FFI bindings
#
# Uses `yarn` and `uv` to build development (debug profile) versions
# of the respective node.js and python bindings.
def "nur install" [
    --dirty (-d), # skip building binding if already built.
] {
    let built_node = "bindings/node/index.d.ts" | path exists
    if (not $dirty) or (not $built_node) {
        run-cmd yarn build:debug
    }
    let built_python = ^uv pip show mk-pass | complete | get exit_code | ($in == 0)
    if (not $dirty) or (not $built_python) {
        run-cmd uv sync --package mk-pass --all-groups --reinstall-package mk-pass
    }
}

alias "nur i" = nur install

# Generate lcov.info
#
# Useful for codecov uploads or VSCode extensions like "Coverage Gutters".
def "nur test lcov" [] {
    run-cmd cargo llvm-cov report --lcov --output-path lcov.info
}


# Generate Rust API docs
def "nur docs" [
    --open (-o) # Open the built docs in your browser
] {
    mut cargo_doc_args = [-p mk-pass --lib --no-deps --target-dir docs/src/rust-api]
    if $open {
        $cargo_doc_args = $cargo_doc_args | append '--open'
    }
    run-cmd cargo doc ...$cargo_doc_args

    run-cmd yarn docs
    if $open {
        start docs/src/node-api/index.html
    }
}


# Run clippy and rustfmt (on packages only)
def "nur lint" [] {
    run-cmd yarn lint
    run-cmd yarn format
    run-cmd uv run --directory bindings/python ruff check
    run-cmd uv run --directory bindings/python ruff format
    run-cmd uv run --directory bindings/python mypy
    run-cmd ...(
        [cargo clippy --fix --allow-dirty --allow-staged --all-features]
    )
    run-cmd ...[cargo fmt]
}


# Run pre-commit hooks manually.
#
# Requires `uv` installed.
def "nur pre-commit" [
    --changes-only (-c), # only run pre-commit on changed files (default is all files)
    --upgrade (-u), # upgrade pre-commit hooks defined in the .pre-commit-config.yaml
] {
    if $upgrade {
        run-cmd ...[uv run pre-commit autoupdate]
    }
    mut args = [pre-commit, run]
    if (not $changes_only) {
        $args = $args | append [--all-files]
    }
    run-cmd ...[uv, run, ...$args]
}
